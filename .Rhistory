round.to <- 2
binned <- round.to * round(d / round.to)
tab <- table(binned)
cex <- 1
plot(0, type = "n",
xlab = paste("Number of Characters",
"(in thousands, with rounding)"),
ylab = "",
axes = FALSE,
xlim = c(0, 75),
ylim = c(-1, max(tab)))
for (i in 1:length(binned)) {
points(rep(as.numeric(names(tab[i])), tab[i]),
1:tab[i] - 0.4,
pch = 19,
col = COL[1],
cex = cex)
}
abline(h = 0)
at <- seq(0, 70, 10)
axis(1, at)
round.to <- 2
binned <- round.to * round(d / round.to)
tab <- table(binned)
cex <- 1
plot(0, type = "n",
xlab = paste("Number of Characters",
"(in thousands, with rounding)"),
ylab = "",
axes = FALSE,
xlim = c(0, 75),
ylim = c(-1, max(tab)))
for (i in 1:length(binned)) {
points(rep(as.numeric(names(tab[i])), tab[i]),
1:tab[i] - 0.4,
pch = 19,
col = COL[1],
cex = cex)
}
abline(h = 0)
at <- seq(0, 70, 10)
axis(1, at)
polygon(M + c(-1.7, 1.7, 0) * 2.5,
c(-1.7, -1.7, -0.1),
border = COL[4],
col = COL[4])
library(devtools)
library(gridExtra)
library(openintro)
#email50 = read.table("email50.txt")
email_table <- email50[c(1,2,3,50),c("spam", "num_char", "line_breaks", "format", "number")]
M <- mean(d)
d <- email50$num_char
M <- mean(d)
round.to <- 2
binned <- round.to * round(d / round.to)
tab <- table(binned)
cex <- 1
plot(0, type = "n",
xlab = paste("Number of Characters",
"(in thousands, with rounding)"),
ylab = "",
axes = FALSE,
xlim = c(0, 75),
ylim = c(-1, max(tab)))
for (i in 1:length(binned)) {
points(rep(as.numeric(names(tab[i])), tab[i]),
1:tab[i] - 0.4,
pch = 19,
col = COL[1],
cex = cex)
}
abline(h = 0)
at <- seq(0, 70, 10)
axis(1, at)
H <- hist(email50$num_char,
+ breaks = 12,
+           plot = FALSE)
counts <- rbind(H$counts)
from   <- head(H$breaks, -1)
to     <- tail(H$breaks, -1)
colnames(counts) <- paste(from, ’to’, to)
histPlot(email50$num_char,
breaks = 12,
xlab = "Number of Characters (in thousands)",
ylab = "Frequency",
ylim = c(0, 20),
col = COL[1],
border = COL[5])
round.to <- 2
binned <- round.to * round(d / round.to)
tab <- table(binned)
cex <- 1
plot(0, type = "n",
xlab = paste("Number of Characters",
"(in thousands, with rounding)"),
ylab = "",
axes = FALSE,
xlim = c(0, 75),
ylim = c(-1, max(tab)))
for (i in 1:length(binned)) {
points(rep(as.numeric(names(tab[i])), tab[i]),
1:tab[i] - 0.4,
pch = 19,
col = COL[1],
cex = cex)
}
abline(h = 0)
at <- seq(0, 70, 10)
axis(1, at)
polygon(M + c(-1.7, 1.7, 0) * 2.5,
c(-1.7, -1.7, -0.1),
border = COL[4],
col = COL[4])
dotPlot(d, xlab = 'Number of Characters (in thousands)', ylab = '', pch = 20, col = COL[1, 2], cex = 1.5, ylim = c(0.95, 1.05), axes = FALSE)
axis(1, at = seq(0, 70, 10))
M <- mean(d)
polygon(M + c(-2, 2, 0) * 1.5, c(0.95, 0.95, 0.98), border = COL[4], col = COL[4])
d <- email50$num_char
dotPlot(d, xlab = 'Number of Characters (in thousands)', ylab = '', pch = 20, col = COL[1, 2], cex = 1.5, ylim = c(0.95, 1.05), axes = FALSE)
axis(1, at = seq(0, 70, 10))
M <- mean(d)
View(email_table)
d
d <- email50$num_char
dotPlot(d, xlab = 'Number of Characters (in thousands)', ylab = '', pch = 20, col = COL[1, 2], cex = 1.5, ylim = c(0.95, 1.05), axes = FALSE)
dotPlot(d, xlab = 'Number of Characters (in thousands)', ylab = '', pch = 20, col = COL[1, 2], cex = 1.5, ylim = c(0.95, 1.05), axes = FALSE)
axis(1, at = seq(0, 70, 10))
M <- mean(d)
p1 <- email50$num_char
p2 <- p1[-which.max(p1)]
p3 <- p1
p3[which.max(p1)] <- 150
dotPlot(p1,
at = 3,
xlab = 'Number of Characters (in thousands)',
ylab = '',
pch = 20,
col = COL[1,3],
cex = 1,
ylim = c(0.5, 3.5),
xlim = c(-35, 151),
axes = FALSE)
at <- seq(0, 150, 50)
axis(1, at, cex.axis = 0.8)
text(0, 3, 'Original', pos = 2, cex = 0.8)
dotPlot(p2,
at = 2,
add = TRUE,
pch = 20,
col = COL[1, 3],
cex = 1)
text(0, 2,
'Drop 64,401',
pos = 2,
cex = 0.8)
dotPlot(p3,
at = 1,
add = TRUE,
pch = 20,
col = COL[1, 3],
cex = 1)
text(0, 1,
'64,401 to 150,000',
pos = 2,
cex = 0.8)
View(email_table)
View(email_table)
p1 <- email50$line_breaks
p2 <- p1[-which.max(p1)]
p3 <- p1
p3[which.max(p1)] <- 150
dotPlot(p1,
at = 3,
xlab = 'Number of Characters (in thousands)',
ylab = '',
pch = 20,
col = COL[1,3],
cex = 1,
ylim = c(0.5, 3.5),
xlim = c(-35, 151),
axes = FALSE)
at <- seq(0, 150, 50)
axis(1, at, cex.axis = 0.8)
text(0, 3, 'Original', pos = 2, cex = 0.8)
dotPlot(p2,
at = 2,
add = TRUE,
pch = 20,
col = COL[1, 3],
cex = 1)
text(0, 2,
'Drop 64,401',
pos = 2,
cex = 0.8)
dotPlot(p3,
at = 1,
add = TRUE,
pch = 20,
col = COL[1, 3],
cex = 1)
text(0, 1,
'64,401 to 150,000',
pos = 2,
cex = 0.8)
p1 <- email50$line_breaks
p2 <- p1[-which.max(p1)]
p3 <- p1
p3[which.max(p1)] <- 150
dotPlot(p1,
at = 3,
xlab = 'Number of Line Breaks (in thousands)',
ylab = '',
pch = 20,
col = COL[1,3],
cex = 1,
ylim = c(0.5, 3.5),
xlim = c(-35, 151),
axes = FALSE)
at <- seq(0, 150, 50)
axis(1, at, cex.axis = 0.8)
text(0, 3, 'Original', pos = 2, cex = 0.8)
dotPlot(p2,
at = 2,
add = TRUE,
pch = 20,
col = COL[1, 3],
cex = 1)
text(0, 2,
'Drop 64,401',
pos = 2,
cex = 0.8)
dotPlot(p3,
at = 1,
add = TRUE,
pch = 20,
col = COL[1, 3],
cex = 1)
text(0, 1,
'64,401 to 150,000',
pos = 2,
cex = 0.8)
plot(log(email50$num_char),
log(email50$line_breaks),
pch = 19,
cex = 1.3,
col = COL[1,4],
xlab = "",
ylab = expression(log[e](line_breaks)))
points(log(email50$num_char),
log(email50$line_breaks),
cex = 1.3,
col = COL[1])
mtext(expression(log[e](num_char)), 1, 1.9)
sqrt
ylab = expression(sqrt(line_breaks)))
plot(sqrt(email50$num_char),
sqrt(email50$line_breaks),
pch = 19,
cex = 1.3,
col = COL[1,4],
xlab = "",
ylab = expression(sqrt(line_breaks)))
points(log(email50$num_char),
log(email50$line_breaks),
cex = 1.3,
col = COL[1])
mtext(expression(log[e](num_char)), 1, 1.9)
plot(sqrt(email50$num_char),
sqrt(email50$line_breaks),
pch = 19,
cex = 1.3,
col = COL[1,4],
xlab = "",
ylab = expression(sqrt(line_breaks)))
points(sqrt(email50$num_char),
sqrt(email50$line_breaks),
cex = 1.3,
col = COL[1])
mtext(expression(log[e](num_char)), 1, 1.9)
plot(sqrt(email50$num_char),
sqrt(email50$line_breaks),
pch = 19,
cex = 1.3,
col = COL[1,4],
xlab = "",
ylab = expression(sqrt(line_breaks)))
points(sqrt(email50$num_char),
sqrt(email50$line_breaks),
cex = 1.3,
col = COL[1])
mtext(sqrt(num_char)), 1, 1.9)
dotPlot(p3,
plot(sqrt(email50$num_char),
sqrt(email50$line_breaks),
pch = 19,
cex = 1.3,
col = COL[1,4],
xlab = "",
ylab = expression(sqrt(line_breaks)))
points(sqrt(email50$num_char),
sqrt(email50$line_breaks),
cex = 1.3,
col = COL[1])
mtext(expression(sqrt(num_char)), 1, 1.9)
inverse.rle()
ginv
require(MASS)
plot(ginv(email50$num_char),
ginv(email50$line_breaks),
pch = 19,
cex = 1.3,
col = COL[1,4],
xlab = "",
ylab = expression(ginv(line_breaks)))
points(ginv(email50$num_char),
ginv(email50$line_breaks),
cex = 1.3,
col = COL[1])
mtext(expression(ginv(num_char)), 1, 1.9)
ginv(2)
solve(2)
plot(solve(email50$num_char),
solve(email50$line_breaks),
pch = 19,
cex = 1.3,
col = COL[1,4],
xlab = "",
ylab = expression(solve(line_breaks)))
points(solve(email50$num_char),
solve(email50$line_breaks),
cex = 1.3,
col = COL[1])
mtext(expression(solve(num_char)), 1, 1.9)
plot(solve(email50$num_char),
solve(email50$line_breaks),
pch = 19,
cex = 1.3,
col = COL[1,4],
xlab = "",
ylab = expression(solve(line_breaks)))
points(solve(email50$num_char),
solve(email50$line_breaks),
cex = 1.3,
col = COL[1])
mtext(expression(solve(num_char)), 1, 1.9)
plot(ginv(email50$num_char),
ginv(email50$line_breaks),
pch = 19,
cex = 1.3,
col = COL[1,4],
xlab = "",
ylab = expression(ginv(line_breaks)))
points(ginv(email50$num_char),
ginv(email50$line_breaks),
cex = 1.3,
col = COL[1])
mtext(expression(ginv(num_char)), 1, 1.9)
source('~/Copy/Tec/IDA/Practica 1/prac1.R')
source('~/Copy/Tec/IDA/Homework/process.R')
setwd("~/Copy/Tec/IDA/Homework")
source('~/Copy/Tec/IDA/Homework/process.R')
source('~/Copy/Tec/IDA/Homework/process.R')
source('~/Copy/Tec/IDA/Homework/process.R')
source('~/Copy/Tec/IDA/Homework/process.R')
shapiro.test(grammys)
shapiro.test(grammys$Time.num)
source('~/Copy/Tec/IDA/Homework/process.R')
source('~/Copy/Tec/IDA/Homework/process.R')
source('~/Copy/Tec/IDA/Homework/process.R')
source('~/Copy/Tec/IDA/Homework/process.R')
source('~/Copy/Tec/IDA/Homework/process.R')
source('~/Copy/Tec/IDA/Homework/process.R')
